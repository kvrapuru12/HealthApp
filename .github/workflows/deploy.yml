name: Deploy HealthApp to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: healthapp
  ECS_CLUSTER: healthapp-cluster
  ECS_SERVICE: healthapp-service
  ECS_TASK_DEFINITION: healthapp-task

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn test
      
    - name: Build application
      run: mvn clean package

  build-and-deploy:
    name: Build and Deploy to AWS
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: mvn clean package
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v2
      with:
        task-definition: task-definition.json
        container-name: healthapp
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Get ALB DNS name
      id: alb-dns
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names healthapp-alb \
          --region ${{ env.AWS_REGION }} \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
        
    - name: Wait for application to be ready
      run: |
        sleep 60
        
    - name: Test deployment
      run: |
        ALB_DNS=${{ steps.alb-dns.outputs.alb-dns }}
        echo "Testing health endpoint: https://$ALB_DNS/api/actuator/health"
        curl -f -s "https://$ALB_DNS/api/actuator/health" || exit 1
        echo "Health check passed!"
        
    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo ""
        echo "üåê Application URLs:"
        echo "   API Base: https://${{ steps.alb-dns.outputs.alb-dns }}/api"
        echo "   Swagger UI: https://${{ steps.alb-dns.outputs.alb-dns }}/api/swagger-ui.html"
        echo "   Health Check: https://${{ steps.alb-dns.outputs.alb-dns }}/api/actuator/health"
        echo ""
        echo "üìä Monitoring:"
        echo "   ECS Console: https://console.aws.amazon.com/ecs/home?region=${{ env.AWS_REGION }}#/clusters/${{ env.ECS_CLUSTER }}"
        echo "   CloudWatch: https://console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#logsV2:log-groups/log-group/ecs/healthapp" 